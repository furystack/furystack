# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  - group: Default Variable Group

trigger:
  - master
  - develop
  - feature/*
  - release/*
  - greenkeeper/*

pool:
  vmImage: 'ubuntu-latest'


jobs:
  - job: buildAndTest
    strategy:
      matrix:
        node_14_x:
          node_version: 14.x
    displayName: Build and test
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    steps:

      - checkout: self
        fetchDepth: 20
      
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
        displayName: Use Node.js $(node_version)

      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages

      - script: yarn install --fronzen-lockfile
        displayName: 'Install dependencies'

      - script: yarn lint
        displayName: 'Lint'

      - script: yarn build
        displayName: 'Build'

      - task: DockerCompose@0
        displayName: Start MongoDB from docker-compose
        inputs:
          action: Run services
          dockerComposeFile: '$(System.DefaultWorkingDirectory)/.devcontainer/docker-compose.yml'
          projectName: $(Build.Repository.Name)
          detached: true
          buildImages: false
          serviceName: db

      - task: DockerCompose@0
        displayName: Start Redis from docker-compose
        inputs:
          action: Run services
          dockerComposeFile: '$(System.DefaultWorkingDirectory)/.devcontainer/docker-compose.yml'
          projectName: $(Build.Repository.Name)
          detached: true
          buildImages: false
          serviceName: redis


      - script: yarn test
        timeoutInMinutes: 5
        displayName: 'Yarn test'

      - script: bash <(curl -s https://codecov.io/bash)
        displayName: 'Publish test results to Codecov'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish test coverage results'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/*coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'

      - task: PublishTestResults@2
        displayName: Publish test results
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '$(System.DefaultWorkingDirectory)/coverage/junit.xml'
  - deployment: deploy
    displayName: Deploy packages to NPM
    dependsOn: buildAndTest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    timeoutInMinutes: 60
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    environment:
      name: NPM
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              fetchDepth: 20
            - task: NodeTool@0
              inputs:
                versionSpec: '14.x'
              displayName: 'Install Node.js'
            - task: Cache@2
              inputs:
                key: 'yarn | "$(Agent.OS)" | yarn.lock'
                restoreKeys: |
                  yarn | "$(Agent.OS)"
                  yarn
                path: $(YARN_CACHE_FOLDER)
              displayName: Cache Yarn packages
            - script: yarn install --frozen-lockfile
              displayName: 'Install'
            - script: yarn lint
              displayName: 'Lint'
            - script: yarn build
              displayName: 'Build'
            - task: DockerCompose@0
              displayName: Start services from docker-compose
              inputs:
                action: Run services
                dockerComposeFile: '$(System.DefaultWorkingDirectory)/docker-compose.yml'
                projectName: $(Build.Repository.Name)
                detached: true
                buildImages: true
            - script: yarn test
              displayName: 'Run Tests'
            - script: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >> .npmrc && echo 'always-auth=true' >> .npmrc && npm whoami && yarn lerna publish from-package -y
              displayName: Publish packages to NPM
              env:
                NPM_TOKEN: $(NPM_TOKEN)

            
            